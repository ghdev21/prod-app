{"version":3,"sources":["components/Pomodoro/Pomodoro.module.scss","components/TimerInfo/TimerInfo.module.scss","components/Clock/Clock.module.scss","components/TimerControls/TimerControls.module.scss","components/Pomodoro/Pomodoro.jsx","components/TimerInfo/TimerInfo.jsx","components/Clock/Clock.jsx","constants/TimerButtonsConfig.js","components/TimerControls/TimerControls.jsx","helpers/createTimerButtons.js","containers/Timer/Timer.jsx"],"names":["module","exports","estimation","className","classes","Wrapper","List","Array","parseInt","map","_","ListItem","key","uuid","task","TimerInfo","PageHeading","title","TaskDescription","description","Pomodoro","mode","time","turn","timeInSeconds","Clock","Overlay","Text","wrapper","style","animationDuration","Pie","Spinner","Filler","Mask","break","id","text","clickHandler","color","work","default","props","finish","start","timerButtonsConfig","item","Button","createTimerButtons","withRouter","match","params","useSelector","state","timer","isCleaned","loading","dispatch","useDispatch","initHandler","useCallback","actionTypes","startHandler","useEffect","TimerControls"],"mappings":"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","file":"static/js/3.60e5255e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Pomodoro_Wrapper__3FhGd\",\"List\":\"Pomodoro_List__CIh1i\",\"ListItem\":\"Pomodoro_ListItem__B1k38\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimerInfo\":\"TimerInfo_TimerInfo__2Cajb\",\"TaskDescription\":\"TimerInfo_TaskDescription__zb0QH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Clock_Wrapper__15RwO\",\"Clock\":\"Clock_Clock__2KXdV\",\"Overlay\":\"Clock_Overlay__2ZefG\",\"Text\":\"Clock_Text__3yqhx\",\"wrapper\":\"Clock_wrapper__3vzUa\",\"Pie\":\"Clock_Pie__34rqD\",\"Spinner\":\"Clock_Spinner__CrA23\",\"rotate\":\"Clock_rotate__sFSWk\",\"Filler\":\"Clock_Filler__3JQYS\",\"transparency\":\"Clock_transparency__dhivx\",\"Mask\":\"Clock_Mask__14Uii\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"TimerControls_Wrapper__1vzkP\"};","import React from 'react';\nimport uuid from 'uuid/v1';\nimport classes from './Pomodoro.module.scss';\n\nexport default ({ estimation }) => {\n\n  return (\n    <div className={classes.Wrapper}>\n      <ul className={classes.List}>\n        {[...Array(parseInt(estimation))].map((_) => (\n          <li className={classes.ListItem} key={uuid()} />\n        ))}\n      </ul>\n      {/*<button className=\"icon-add\" />*/}\n    </div>\n  );\n};\n","import React from 'react';\nimport PageHeading from '../PageHeading/PageHeading';\nimport Pomodoro from '../Pomodoro/Pomodoro';\nimport classes from './TimerInfo.module.scss';\n\nexport default ({ task }) => task && (\n  <div className={classes.TimerInfo}>\n    <PageHeading title={`1. ${task.title}`} />\n    <p className={classes.TaskDescription}>\n      {task.description}\n    </p>\n    <Pomodoro estimation={task.estimation} />\n  </div>\n);\n","import React from 'react';\nimport classes from './Clock.module.scss';\n\nexport default ({ mode, time, turn }) => {\n  const timeInSeconds = time * 60;\n\n  return (\n    <div className={classes.Wrapper}>\n      <div className={classes.Clock}>\n\n        <div className={classes.Overlay}>\n          {turn > 0\n            ? <div className={classes.Text}>{time} min </div>\n            : <h3 className={classes.Text}>Let's do it</h3>}\n        </div>\n        {mode\n        && (\n          <div className={classes.wrapper} style={{ animationDuration: `${timeInSeconds}s` }}>\n            <div className={`${classes.Pie} ${classes.Spinner}`} />\n            <div className={`${classes.Pie} ${classes.Filler}`} />\n            <div className={classes.Mask} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import uuid from 'uuid/v1';\n\nexport default {\n  break: [\n    {\n      id: uuid(),\n      text: 'Start Pomodora',\n      clickHandler: 'start',\n      color: 'Green',\n    },\n    {\n      id: uuid(),\n      text: 'Finish Tas',\n      clickHandler: 'finish',\n      color: 'Blue',\n    },\n  ],\n  work: [\n    {\n      id: uuid(),\n      text: 'Fail Pomodora',\n      clickHandler: 'finish',\n      color: 'Remove',\n    },\n    {\n      id: uuid(),\n      text: 'Finish Pomodora',\n      clickHandler: 'finish',\n      color: 'Green',\n    },\n  ],\n  default: [\n    {\n      id: uuid(),\n      text: 'Start',\n      clickHandler: 'start',\n      color: 'Green',\n    },\n  ],\n};\n","import React from 'react';\nimport createTimerButtons from '../../helpers/createTimerButtons';\nimport classes from './TimerControls.module.scss';\n\nexport default (props) => (\n  <div className={classes.Wrapper}>\n    {createTimerButtons(props)}\n  </div>\n);","import React from 'react';\nimport timerButtonsConfig from '../constants/TimerButtonsConfig';\nimport Button from '../components/UI/Button/Button';\n\nexport default ({ mode, finish, start }) => {\n  return timerButtonsConfig[mode || 'default'].map((item) => {\n    const clickHandler = item.clickHandler === 'start'\n      ? start\n      : finish;\n\n    return (\n      <Button\n        key={item.id}\n        color={item.color}\n        clickHandler={clickHandler}\n      >\n        {item.text}\n      </Button>\n    );\n  });\n};\n","import React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport TimerInfo from '../../components/TimerInfo/TimerInfo';\nimport Clock from '../../components/Clock/Clock';\nimport TimerControls from '../../components/TimerControls/TimerControls';\nimport * as actionTypes from '../../store/actions';\n\nexport default withRouter(({ match }) => {\n  const { id } = match.params;\n  const {\n    task,\n    time,\n    turn,\n    mode,\n    isCleaned,\n    loading,\n  } = useSelector((state) => state.timer);\n  const dispatch = useDispatch();\n  const initHandler = useCallback(() => dispatch(actionTypes.initTimer(id)), [dispatch, id]);\n  const startHandler = useCallback(() => dispatch(actionTypes.startIteration()), [dispatch]);\n  const finishHandler = () => dispatch(actionTypes.finishIteration());\n\n  useEffect(() => initHandler(), [initHandler]);\n\n  useEffect(() => {\n    if (isCleaned) {\n      startHandler();\n    }\n  }, [isCleaned, startHandler]);\n\n  return !loading && (\n    <div>\n      <TimerInfo task={task} />\n      <Clock\n        mode={mode}\n        time={time}\n        turn={turn}\n      />\n      <TimerControls\n        start={startHandler}\n        finish={finishHandler}\n        mode={mode}\n      />\n    </div>\n  );\n});\n"],"sourceRoot":""}